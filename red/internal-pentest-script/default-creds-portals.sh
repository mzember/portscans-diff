#!/bin/bash
# debug ... 1 = echo to std err, 2 = proxy through localhost:8888
DEBUG=0
LIFERAY_NS=38.75.3.122
ZABBIX_ZONES_DIR=./zabbix-lpm
TIMEOUT=3

#######
# Preparation
#
# 1, download zone files (from zabbix) - manual
# 2, iterate over each *.db file to extract IN CNAME and IN A records to get subdomains
# 3, query Liferay nameserver for each domain/subdomain to get IP (if still exists)
#

function initialize() {
	echo "Fetching liferay domains based on $ZABBIX_ZONES_DIR ..."

	if [ ! -f liferay-domains.txt ]; then
		touch liferay-domains.txt
		for i in `find $ZABBIX_ZONES_DIR -name '*.db' | grep -v addr.arpa`; do
			# get domain name from file name
			DOMAIN_NAME="$(echo $i | sed 's/.*\/\([^\/]\+\).db/\1/')"

			# get CNAME and A records (without @ or *.)
			grep "IN.*CNAME\|IN.*A" $i | grep '^[a-z1-9A-Z_-]' | tr $'\t' ' ' | cut -d$' ' -f 1 | sed "s/$/.$DOMAIN_NAME/" > liferay-domains.txt.tmp
			echo $DOMAIN_NAME >> liferay-domains.txt.tmp

			# deduplicate
			cat liferay-domains.txt >> liferay-domains.txt.tmp
			cat liferay-domains.txt.tmp | sort -u > liferay-domains.txt
			rm liferay-domains.txt.tmp
		done
	fi

	echo "... $(cat liferay-domains.txt | wc -l) domains saved in liferay-domains.txt"
	echo
	echo "Filtering to those with defined DNS address ..."

	if [ ! -f liferay-domains.ips.txt ]; then
		touch liferay-domains.ips.txt
		for i in $(cat liferay-domains.txt); do
			IP="$(dig +short "$i" @$LIFERAY_NS | grep '^[0-9\.]\+$' | head -n 1)"
			if [ "" != "$IP" ]; then
				echo $i:$IP >> liferay-domains.ips.txt
			fi
		done
	fi

	echo "... $(cat liferay-domains.ips.txt | wc -l) domains with IPs saved in liferay-domains.ips.txt"
}

#######
#
# Pentest functions for each vuln tested
#

function log() {
	(>&2 echo "$@")
}

function curlx() {
	if [ "0" != "$DEBUG" ]; then
		log $*
	fi

	if [ "2" == "$DEBUG" ]; then
		PROXY="--proxy http://localhost:8888"
	fi

	curl $PROXY --silent --no-keepalive --max-time $TIMEOUT --insecure --user-agent "Liferay Security Tool (1.0.1)" -H "Connection: close" -H "Accept: */*" "$@"
}

function pentest_default_credentials() {
	IP="$1"
	HOST="$2"
	URL="$3"

	# default credentials

	THREAD_FILE="$0.thread.$(cat /dev/urandom | tr -dc '[:alpha:]' | head -c 8)"

	(curlx --include "$URL//c/portal/login" --data "login=test@liferay.com&password=test&redirect=/default_credentials" -H "Host: $HOST" -H "Cookie: COOKIE_SUPPORT=true" | grep 'default_credentials' > "$THREAD_FILE.1") &
	P1=$!
	(curlx --include "$URL//c/portal/login" --data "login=test&password=test&redirect=/default_credentials" -H "Host: $HOST" -H "Cookie: COOKIE_SUPPORT=true" | grep 'default_credentials' > "$THREAD_FILE.2") &
	P2=$!

	wait $P1 $P2

	cat $THREAD_FILE.* 2>/dev/null | sort -u

	rm -f $THREAD_FILE.*
}

function pentest_deserialization() {
	IP="$1"
	HOST="$2"
	URL="$3"

	curlx "$URL/api//axis" -H "Host: $HOST" | grep 'Portal_PortalService' | sed 's/.*href="\([^"]\+\)\/api\/axis[^"]*".*/\1\/\/api\/axis/gi'
}

function fetch_with_redirects() {
	IP="$1"
	HOST="$2"
	URL="$3"

	# we need to replace the redirected host back to the old IP and send with host header again

	response=$(curlx --include -H "Host: $HOST" $URL)
	location=$(echo "$response" | grep '^Location: ' | sed 's/Location: //' | grep "$HOST" | sed "s/$HOST/$IP/" | tr -d '\r')
	COUNTER=0
	while [ "" != "$location" -a $COUNTER -lt 3 ]; do
		response=$(curlx --include -H "Host: $HOST" "$location")
		location=$(echo "$response" | grep '^Location: ' | sed 's/Location: //' | grep "$HOST" | sed "s/$HOST/$IP/" | tr -d '\r')
		let COUNTER=COUNTER+1
	done

	echo "$response"
}

function pentest_create_account() {
	IP="$1"
	HOST="$2"
	URL="$3"

	# create account, possible to elevate privileges using known vulns (WCM templates, kaleo)

	THREAD_FILE="$0.thread.$(cat /dev/urandom | tr -dc '[:alpha:]' | head -c 8)"

	(fetch_with_redirects "$IP" "$HOST" "$URL/?p_p_id=58&p_p_state=exclusive&_58_struts_action=%2Flogin%2Fcreate_account&strip=false" | grep 'id="_58_fm"' | grep 'create_account' | sed 's/.*action="\([^"]\+\)".*/\1/' | sed 's/&amp;/\&/gi' | sed 's/&#x\([^;]\+\);/\\\\x\1/gi' | sed 's/$/\\\\x0a/'| xargs printf '%b' | sed 's/lifecycle=1/lifecycle=0/gi' | sed 's/exclusive/maximized/gi' | sed 's/p_auth=[^&]\+&//') > "$THREAD_FILE.1" &
	P1=$!
	(fetch_with_redirects "$IP" "$HOST" "$URL/1?p_p_id=58&p_p_state=exclusive&_58_struts_action=%2Flogin%2Fcreate_account&strip=false" | grep 'id="_58_fm"' | grep 'create_account' | sed 's/.*action="\([^"]\+\)".*/\1/' | sed 's/&amp;/\&/gi' | sed 's/&#x\([^;]\+\);/\\\\x\1/gi' | sed 's/$/\\\\x0a/'| xargs printf '%b' | sed 's/lifecycle=1/lifecycle=0/gi' | sed 's/exclusive/maximized/gi' | sed 's/p_auth=[^&]\+&//') > "$THREAD_FILE.2" &
	P2=$!
	(fetch_with_redirects "$IP" "$HOST" "$URL/?p_p_id=com_liferay_login_web_portlet_LoginPortlet&p_p_state=exclusive&_com_liferay_login_web_portlet_LoginPortlet_struts_action=%2Flogin%2Fcreate_account&strip=false" | grep 'id="_com_liferay_login_web_portlet_LoginPortlet_fm"' | grep 'create_account' | sed 's/.*action="\([^"]\+\)".*/\1/' | sed 's/&amp;/\&/gi' | sed 's/&#x\([^;]\+\);/\\\\x\1/gi' | sed 's/$/\\\\x0a/'| xargs printf '%b' | sed 's/lifecycle=1/lifecycle=0/gi' | sed 's/exclusive/maximized/gi' | sed 's/p_auth=[^&]\+&//') > "$THREAD_FILE.3" &
	P3=$!
	(fetch_with_redirects "$IP" "$HOST" "$URL/1?p_p_id=com_liferay_login_web_portlet_LoginPortlet&p_p_state=exclusive&_com_liferay_login_web_portlet_LoginPortlet_struts_action=%2Flogin%2Fcreate_account&strip=false" | grep 'id="_com_liferay_login_web_portlet_LoginPortlet_fm"' | grep 'create_account' | sed 's/.*action="\([^"]\+\)".*/\1/' | sed 's/&amp;/\&/gi' | sed 's/&#x\([^;]\+\);/\\\\x\1/gi' | sed 's/$/\\\\x0a/'| xargs printf '%b' | sed 's/lifecycle=1/lifecycle=0/gi' | sed 's/exclusive/maximized/gi' | sed 's/p_auth=[^&]\+&//') > "$THREAD_FILE.4" &
	P4=$!

	wait $P1 $P2 $P3 $P4

	cat $THREAD_FILE.* 2>/dev/null | sort -u

	rm -f $THREAD_FILE.*
}

function pentest_site_with_port() {
	IP="$1"
	HOST="$2"
	URL="$3"

 	pentest_default_credentials "$IP" "$HOST" "$URL"
	pentest_deserialization "$IP" "$HOST" "$URL"
	pentest_create_account "$IP" "$HOST" "$URL"
}

function pentest_site() {
	IP="$1"
	HOST="$2"

	THREAD_FILE="$0.thread.$(cat /dev/urandom | tr -dc '[:alpha:]' | head -c 8)"

	(nc -z -w $TIMEOUT $IP 80 </dev/null >/dev/null 2>&1 && pentest_site_with_port "$IP" "$HOST" "http://$IP" > "$THREAD_FILE.1") &
	P1=$!
	(nc -z -w $TIMEOUT $IP 443 </dev/null >/dev/null 2>&1 && pentest_site_with_port "$IP" "$HOST" "https://$IP" > "$THREAD_FILE.2")  &
	P2=$!
	(nc -z -w $TIMEOUT $IP 8080 </dev/null >/dev/null 2>&1 && pentest_site_with_port "$IP" "$HOST" "http://$IP:8080" > "$THREAD_FILE.3")  &
	P3=$!
	(nc -z -w $TIMEOUT $IP 8443 </dev/null >/dev/null 2>&1 && pentest_site_with_port "$IP" "$HOST" "https://$IP:8443" > "$THREAD_FILE.4")  &
	P4=$!

	wait $P1 $P2 $P3 $P4

	cat $THREAD_FILE.* 2>/dev/null | sort -u

	rm -f $THREAD_FILE.*
}

function pentest() {
	DOMAIN_IPS=$(cat liferay-domains.ips.txt)

	echo "Running penetration tests ..."

	TOTAL=$(cat liferay-domains.ips.txt | wc -l)
	COUNTER=0

	for DOMAIN_IP in $DOMAIN_IPS; do
		SITE=$(echo $DOMAIN_IP | cut -d':' -f 1)
		IP=$(echo $DOMAIN_IP | cut -d':' -f 2)

		let COUNTER=COUNTER+1
		(>&2 printf "Progress: $COUNTER/$TOTAL\r")

		echo
		echo " --- Processing $SITE with address $IP ---"

		pentest_site $IP $SITE
	done
}

function finish() {
	rm -f $0.thread.*

	END_TIME=`date +%s`

	(>&2 printf "Execution time: $((END_TIME-START_TIME))")
}

F="$0.out"

if [ -e $F ]; then
	COUNTER=0
	while [ -e "$F.$COUNTER" ]; do
		let COUNTER=COUNTER+1
	done

	echo "File $F already exists, renaming to $F.$COUNTER"
	mv $F $F.$COUNTER
fi

START_TIME=$(date +%s)
trap finish EXIT

initialize > $F

pentest > $F

exit 0
