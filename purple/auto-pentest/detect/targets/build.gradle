task hosts(type: Exec) {
	ext.outputFilePath = "$rootDir/${it.path}"
	executable 'nmap'
	workingDir rootDir
	args = ['-iL', targetSpecificationFilePath, '-oG', "${outputFilePath}.raw", '-sn']
	standardOutput = new ByteArrayOutputStream()
	errorOutput = new ByteArrayOutputStream()
	doLast {
		def byteArrayOutputStream = new ByteArrayOutputStream()
		exec {
			executable 'sed'
			workingDir rootDir
			args = ['/^#/d; s/Host: \\(.*\\) (.*/\\1/', "${outputFilePath}.raw"]
			standardOutput = byteArrayOutputStream
		}
		file(outputFilePath).text = byteArrayOutputStream.toString()
	}
}

task http(type: Exec) {
	ext.outputFilePath = "$rootDir/${it.path}"
	executable 'nmap'
	workingDir rootDir
	args = ['-iL', hosts.outputFilePath, '-oG', "${outputFilePath}.raw", '-p80']
	standardOutput = new ByteArrayOutputStream()
	errorOutput = new ByteArrayOutputStream()
	doLast {
		def byteArrayOutputStream = new ByteArrayOutputStream()
		exec {
			executable 'sed'
			workingDir rootDir
			args = ['/\\/open\\//!d; s/Host: \\(.*\\) (.*/\\1/', "${outputFilePath}.raw"]
			standardOutput = byteArrayOutputStream
		}
		file(outputFilePath).text = byteArrayOutputStream.toString()
	}
}

task liferay {
	ext.outputFilePath = "$rootDir/${it.path}"
	doFirst {
		file(outputFilePath).text = ""
	}
	doLast {
		def outputFile = file(outputFilePath)

		for (ip in file(http.outputFilePath).readLines()) {
			def byteArrayOutputStream = new ByteArrayOutputStream()

			exec {
				executable 'sh'
				args = ['liferay/portal-status-http-header.sh', ip]
				standardOutput = byteArrayOutputStream
			}

			if (byteArrayOutputStream.toString().trim() == 'detected') {
				outputFile.append("$ip\n")
			}
		}
	}
}

task detect {
	dependsOn tasks.matching { it.name.startsWith('detect') && it.name != name}
}