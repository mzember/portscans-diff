task owners {
	ext.outputFilePath = "$rootDir/${it.path}"
	doLast {
		file(outputFilePath).text = ""
	}
	doLast {
		def hostVulnerabilities = new HashMap<String, List<String>>()

		def vulnerabilityFiles = fileTree(dir: rootDir, include: ':detect:vulnerabilities:*').files

		for (vulnerabilityFile in vulnerabilityFiles) {
			def matcher = (vulnerabilityFile.name =~ /:detect:vulnerabilities:(.*):/)

			hostVulnerabilities.put(matcher[0][1], vulnerabilityFile.text.trim().split(',').toList())
		}

		def hostHostnames = new HashMap<String, String>()

		for (hostHostname in file("$rootDir/:util:hostHostnames")) {
			def parts = hostHostname.split(',')

			def host = parts[0]

			if (parts.size() > 1) {
				def hostname = parts[1]

				hostHostnames.put(host, hostname)
			}
		}

		def hostnamesOwners = new HashMap<String, String>()

		for (hostnameOwner in file("$rootDir/$hostnamesOwnersFilePath")) {
			def parts = hostnameOwner.split(',')

			def hostname = parts[0]

			if (parts.size() > 1) {
				def owner = parts[1]

				hostnamesOwners.put(hostname, owner)
			}
		}

		def ownerHostsVulnerabilities = new HashMap<String, HashMap<String, List<String>>>()

		for (host in hostVulnerabilities.keySet()) {
			if (hostHostnames.get(host) == null) {
				def thing = new HashMap<String, List<String>>()

				thing.put(host, hostVulnerabilities.get(host))

				ownerHostsVulnerabilities.put("na", thing)

				continue;
			}

			def owner = hostnamesOwners.get(hostHostnames.get(host))

			if (ownerHostsVulnerabilities.containsKey(owner)) {
				def hostnameVulnerabilities = ownerHostsVulnerabilities.get(owner)

				hostnameVulnerabilities.put(hostHostnames.get(host), hostVulnerabilities.get(host))
			}
			else {
				def hostnameVulnerabilities = new HashMap<String, List<String>>()

				hostnameVulnerabilities.put(hostHostnames.get(host), hostVulnerabilities.get(host))

				if (owner == null) {
					ownerHostsVulnerabilities.put('no.owner', hostnameVulnerabilities)
				}
				else {
					ownerHostsVulnerabilities.put(hostnamesOwners.get(hostHostnames.get(host)), hostnameVulnerabilities)
				}
			}
		}

		def outputFile = file(outputFilePath)

		outputFile.append("screenname\thostname\tvulnerabilities\n")

		for (owner in ownerHostsVulnerabilities.keySet()) {
			for (hostnameVulnerabilities in ownerHostsVulnerabilities.get(owner)) {
				outputFile.append("${owner}\t${hostnameVulnerabilities.key}\t${hostnameVulnerabilities.value.join(', ')}\n")
			}
		}
	}
}