task owners {
	ext.outputFilePath = "$buildDir/$name"
	doLast {
		file(outputFilePath).text = ""
	}
	doLast {
		def hostVulnerabilities = new HashMap<String, List<String>>()

		def vulnerabilityFiles = fileTree(dir: "vulnerabilities/build").files

		for (vulnerabilityFile in vulnerabilityFiles) {
			def matcher = (vulnerabilityFile.name =~ /^(.*)_[a-z]+_(.*)/)

			def host = matcher[0][1]

			def vulnerability = matcher[0][2]

			if (!hostVulnerabilities.containsKey(host)) {
				hostVulnerabilities.put(host, [vulnerability])
			}
			else {
				def vulnerabilities = hostVulnerabilities.get(host)

				vulnerabilities.add(vulnerability)
			}
		}

		def hostHostnames = new HashMap<String, String>()

		def utilHostHostnames = tasks.findByPath(':util:hostHostnames')

		def hostHostNames = file(utilHostHostnames.outputFilePath).readLines()

		for (hostHostname in hostHostNames) {
			def parts = hostHostname.split(',')

			def host = parts[0]

			if (parts.size() > 1) {
				def hostname = parts[1]

				hostHostnames.put(host, hostname)
			}
		}

		def hostnamesOwners = new HashMap<String, String>()

		for (hostnameOwner in file("$rootDir/$hostnamesOwnersFilePath")) {
			def parts = hostnameOwner.split(',')

			def hostname = parts[0]

			if (parts.size() > 1) {
				def owner = parts[1]

				hostnamesOwners.put(hostname, owner)
			}
		}

		def ownerHostVulnerabilityMap = new HashMap<String, HashMap<String, List<String>>>()

		for (host in hostVulnerabilities.keySet()) {
			def hostname = hostHostnames.get(host)

			def vulnerabilities = hostVulnerabilities.get(host)

			if (hostname == null) {
				def thing = new HashMap<String, List<String>>()

				thing.put(host, vulnerabilities)

				ownerHostVulnerabilityMap.put("na", thing)

				continue;
			}

			def owner = hostnamesOwners.get(hostname)

			if (ownerHostVulnerabilityMap.containsKey(owner)) {
				def hostnameVulnerabilities = ownerHostVulnerabilityMap.get(owner)

				hostnameVulnerabilities.put(hostname, vulnerabilities)
			}
			else {
				def hostnameVulnerabilities = new HashMap<String, List<String>>()

				hostnameVulnerabilities.put(hostname, vulnerabilities)

				if (owner == null) {
					if (ownerHostVulnerabilityMap.containsKey('no.owner')) {
						def noOwnerHostNameVulnerabilities = ownerHostVulnerabilityMap.get('no.owner')

						noOwnerHostNameVulnerabilities.putAll(hostnameVulnerabilities)
					}
					else {
						ownerHostVulnerabilityMap.put('no.owner', hostnameVulnerabilities)
					}
				}
				else {
					ownerHostVulnerabilityMap.put(owner, hostnameVulnerabilities)
				}
			}
		}

		file("ownerHostVulnerabilityMap.json").text = groovy.json.JsonOutput.toJson(ownerHostVulnerabilityMap).toString()

		def outputFile = file(outputFilePath)

		outputFile.append("screenname\thostname\tvulnerabilities\n")

		for (owner in ownerHostVulnerabilityMap.keySet()) {
			for (hostnameVulnerabilities in ownerHostVulnerabilityMap.get(owner)) {
				outputFile.append("${owner}\t${hostnameVulnerabilities.key}\t${hostnameVulnerabilities.value.join(', ')}\n")
			}
		}

		def issues = []

		def ownerHostVulnerabilityList = []

		def owners = []

		owners.addAll(ownerHostVulnerabilityMap.keySet())

		owners = owners.sort()

		for (owner in owners) {
			def assignee = ""

			if (!((owner == "na") || (owner == "no.owner"))) {
				assignee = owner
			}

			def issue = ["assignee":assignee, "summary":"Security vulnerabilities found"]

			def labels = []

			def hostVulnerabilityMap = ownerHostVulnerabilityMap.get(owner)

			def hosts = hostVulnerabilityMap.keySet()

			hosts = hosts.sort()

			for (host in hosts) {
				def vulnerabilities = hostVulnerabilityMap.get(host)

				vulnerabilities = vulnerabilities.sort()

				for (vulnerability in vulnerabilities) {
					labels.add("$hostVulnerabilityLabelPrefix$host;$vulnerability")

					def ownerHostVulnerability = [owner, host, vulnerability]

					ownerHostVulnerabilityList.add(ownerHostVulnerability)
				}
			}

			issue.put("labels", labels)

			issues.add(issue)
		}

		file('issues.json').text = groovy.json.JsonOutput.toJson(issues).toString()
	}
}