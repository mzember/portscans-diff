task clean {
	doLast {
		delete fileTree(rootDir) { include ':detect:vulnerabilities:*' }
	}
}

def hosts = []

for (rootFile in rootDir.listFiles()) {
	if (!rootFile.name.startsWith(':detect:targets') || rootFile.name.endsWith('.raw')) {
		continue
	}

	def service = rootFile.name - ':detect:targets:'

	task "$service" {
		ext.service = service
		ext.vulnerabilities = []

		def serviceTasks = tasks.matching { it.hasProperty("service") && it.ext.service == ext.service && it.name != name }

		dependsOn serviceTasks
	}

	def serviceVulnerabilitiesDir = file(service)

	def serviceHostsFile = rootFile

	if (serviceVulnerabilitiesDir.exists() && serviceVulnerabilitiesDir.isDirectory()) {
		def serviceHosts = serviceHostsFile.readLines()

		hosts.addAll(serviceHosts)

		for (serviceHost in serviceHosts) {
			task "$serviceHost" {
				ext.outputFilePath = "$rootDir/${it.path}"
				ext.host = serviceHost
				ext.vulnerabilities = []

				def hostVulnerabilityTasks = tasks.matching {
					it.hasProperty("host") && (it.ext.host == ext.host) && it.hasProperty("vulnerability") && (it.name != name)
				}

				dependsOn hostVulnerabilityTasks

				doLast {
					def hostVulnerableTasks = hostVulnerabilityTasks.matching { it.ext.vulnerable == true }

					for (hostVulnerableTask in hostVulnerableTasks) {
						vulnerabilities.add(hostVulnerableTask.vulnerability)
					}

					file(outputFilePath).text = vulnerabilities.join(',')
				}
			}

			def serviceVulnerabilityScriptsDir = file(service)

			for (serviceVulnerabilityScriptFile in serviceVulnerabilityScriptsDir.listFiles()) {
				def parts = serviceVulnerabilityScriptFile.name.split("\\.")

				def vulnerability = parts[0]
				def extension = parts[1]

				if (!project.tasks.findByName(vulnerability)) {
					task "$vulnerability" {
						ext.outputFilePath = "$rootDir/${it.path}"
						ext.vulnerability = vulnerability
						ext.hosts = []

						def vulnerabilityTasks = tasks.matching {
							it.hasProperty("vulnerability") && (it.ext.vulnerability == ext.vulnerability) && it.hasProperty("host") && (it.name != name)
						}

						dependsOn vulnerabilityTasks

						doLast {
							def vulnerableTasks = vulnerabilityTasks.matching { it.ext.vulnerable == true }

							for (vulnerableTask in vulnerableTasks) {
								hosts.add(vulnerableTask.host)
							}

							file(outputFilePath).text = hosts.join(',')
						}
					}
				}

				task "$serviceHost:$service:$vulnerability"(type: Exec) {
					ext.outputFilePath = "$rootDir/${it.path}"
					ext.host = serviceHost
					ext.service = service
					ext.vulnerability = vulnerability
					ext.vulnerable = false
					ext.standardOutput = new ByteArrayOutputStream()
					ext.errorOutput = new ByteArrayOutputStream()

					if (extension == 'py') {
						executable 'python'
						args = ["$serviceVulnerabilityScriptFile", "http://$host"]
					}
					else if (extension == 'sh') {
						executable 'sh'
						args = ["$serviceVulnerabilityScriptFile", host]
					}

					workingDir = serviceVulnerabilityScriptsDir
					standardOutput = ext.standardOutput
					errorOutput = ext.errorOutput
					ignoreExitValue = true

					doLast {
						if (ext.standardOutput.toString().trim() == 'vulnerable') {
							vulnerable = true
						}
					}
				}
			}
		}
	}
}

tasks.addRule("Pattern: [A-Z]+-\\d+") { String taskName ->
	if (taskName.matches("[A-Z]+-\\d+")) {
		task(taskName) {
			dependsOn tasks.matching {
				it.name.matches(".*[A-Z]+-\\d+.*") && (it.name != taskName)
			}
		}
	}
}