task clean(type: Delete) {
	ext.buildDirs = []

	fileTree(rootDir).visit {
		if (it.name == 'build') {
			buildDirs.add(it.path)
		}
	}

	delete buildDirs
}

gradle.taskGraph.whenReady {
	allprojects {
		tasks.each {
			if (it.hasProperty('outputFilePath')) {
				it.doFirst {
					file(outputFilePath).parentFile.mkdirs()
				}

				if (file("$projectDir/${it.name}-ext").exists()) {
					it.doLast {
						file(outputFilePath).append(file("$projectDir/${it.name}-ext").text)
					}
				}

				if (it.hasProperty('vulnerable')) {
					it.doLast {
						if (vulnerable == true) {
							file(file(outputFilePath)).text =
								"""standardOutput:
$it.ext.standardOutput

errorOutput:
$it.ext.errorOutput"""
						}
					}
				}
			}
		}
	}
}

task scanForHosts {
	dependsOn ":detect:targets:hosts", ":detect:targets:http", ":detect:targets:liferay"
}

task scanHostsForVulnerabilities {
	dependsOn ":detect:vulnerabilities:liferay"
}

task generateHostsHostnames {
	dependsOn ":util:hostHostnames"
}

task generateVulnerableHostsOwners {
	dependsOn ":detect:owners"
	doLast {
		def outputPath = tasks.getByPath(":detect:owners").outputFilePath
		println "Owners file location: $outputPath"
	}
}