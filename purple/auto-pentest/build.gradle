task clean(type: Delete) {
	ext.buildDirs = []

	fileTree(rootDir).visit {
		if (it.name == 'build') {
			delete it.path
		}
	}
}

gradle.taskGraph.whenReady {
	allprojects {
		tasks.each {
			if (it.hasProperty('outputFilePath')) {
				it.doFirst {
					file(outputFilePath).parentFile.mkdirs()
				}

				if (file("$projectDir/${it.name}-ext").exists()) {
					it.doLast {
						file(outputFilePath).append(file("$projectDir/${it.name}-ext").text)
					}
				}
			}

			if (it.hasProperty('vulnerable')) {
				it.doLast {
					if (vulnerable == true) {
						file("$buildDir/${it.name}").text =
"""standardOutput:
$it.ext.standardOutput

errorOutput:
$it.ext.errorOutput"""
					}
				}
			}
		}
	}
}